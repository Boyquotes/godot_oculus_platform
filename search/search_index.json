{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Godot Oculus Platform Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This is the documentation site for the Godot Oculus Platform, an implementation of the Oculus Platform SDK for the Godot Engine.</p> <p>Please note that both the documentation and the plugin itself are in development and may be incomplete.</p> <p>Quick links:</p> <ul> <li>Downloads</li> <li>Oculus Platform documentation</li> </ul> <p>If you find an issue, please report it on the GitHub issues page.</p> <p>The following list tracks the supported functions from the Oculus Platform SDK: <pre><code>\u2714\ufe0f = Fully implemented\n\u2796 = Partially implemented\n\u274c = Not implemented yet\n</code></pre></p> Topic Status Platform initialization \u2714\ufe0f User \u2714\ufe0f Achievements \u2714\ufe0f In-App Purchases \u274c Asset File \u274c Leaderboard \u274c"},{"location":"build/","title":"Build","text":"<p>After cloning the repository, initialize the submodules by running: <pre><code>git submodule update --init --recursive\n</code></pre></p> <p>Then run: <pre><code>scons platform=PLATFORM_HERE target=TARGET_HERE\n</code></pre></p> <p>The required compilation parameters are:</p> <ul> <li>platform: <code>windows</code>, <code>macos</code>, <code>linux</code> or <code>android</code></li> <li>target: <code>template_debug</code> or <code>template_release</code></li> </ul> <p>For android, you also have to add: <code>arch=arm64v8</code></p> <p>You can optionally add <code>-j&lt;cores&gt;</code> to use a set number of cores to build this asset. For example: <code>-j4</code></p> <p>The files will be placed in: <code>demo/addons/godot_oculus_platform/bin</code></p>"},{"location":"build/#android-plugin","title":"Android Plugin","text":"<p>This plugin also requires an Android plugin to work with the Quest platform. To build the android plugin you have to navigate to <code>tools/godotoculusplatform-android-plugin</code> and run:</p> <p>On windows: <pre><code>gradlew.bat build\n</code></pre></p> <p>On linux: <pre><code>./gradlew build\n</code></pre></p> <p>Finally, you have to copy the files into place:</p> Source Destination <code>demo/addons/godot_oculus_platform</code> Your projet's addon folder <code>tools/godotoculusplatform-android-plugin/godotoculusplatform-android-plugin/build/outputs/aar/godotoculusplatform-android-plugin-release.aar</code> <code>android/plugins/godotoculusplatform</code> <code>demo/android/plugins/godotoculusplatform-android-plugin.gdap</code> <code>android/plugins</code> <p>Note</p> <p>Make sure to enable the <code>Godot Oculus Platform Android Plugin</code> in your export template. Also, make sure to enable the <code>Godot Oculus Platform</code> plugin in your Project Settings.</p>"},{"location":"download/","title":"Download","text":"<p>There are two versions right now:</p> <ul> <li>Stable</li> <li>Development</li> </ul> <p>The stable version will have less features but they will be more tested. Development versions have more features but they haven't been tested as thoroughly as the stable versions.</p> <p>In the case of the development versions, look for an artifact with a name similar to <code>OculusPlatformSDK-51-for-godot-4.0.2-stable_v0.0.1-alpha</code></p> <p>NOTE: \"stable\" is used pretty loosely at the moment. Expect usage API changes in the future.</p>"},{"location":"examples/","title":"Examples","text":"<p>Here are some examples of using this asset. For more details make sure to check the documentation for each function you want to use.</p>"},{"location":"examples/#entitlement-check","title":"Entitlement check","text":"<p>An entitlement check allows you to quickly check if the user that launched the app actually is entitled to it. <pre><code>GDOP.initialize(false) # We have to initialize this plugin first\n# Initializing android platform with the APP_ID as a parameter\nGDOculusPlatform.initialize_android_async(\"314159265358979\")\\\n.then(func(_initialization_resp):\nprint(\"Oculus Platform initialized!\")\n# Is the user entitled to this app?\nGDOculusPlatform.get_is_viewer_entitled()\\\n    .then(func(_is_viewer_entitled_resp):\nprint(\"User is entitled!\")\n)\\\n    .error(func(is_viewer_entitled_err):\nprint(\"User not entitled/error! \", is_viewer_entitled_err)\n)\n)\\\n.error(func(initialization_err):\nprint(\"Oculus Platform initialization error: \", initialization_err)\n)\n</code></pre></p> <p>You may notice something odd on the first line: <pre><code>GDOP.initialize(false) # We have to initialize this plugin first\n</code></pre></p> <p><code>GDOP</code> is different from the singleton we use for the other functions (<code>GDOculusPlatform</code>). <code>GDOP</code> is only used to initialize the plugin and the only parameter it takes is a boolean to initialize in <code>quiet mode</code> or not. Setting it to false will print unhandled messages sent from the Oculus Platform.</p>"},{"location":"examples/#getting-logged-in-user-information","title":"Getting logged in user information","text":"<p>Since the promises (<code>then</code> and <code>error</code> functions) take a <code>Callable</code> you can do something like this: <pre><code>GDOculusPlatform.initialize_android_async(\"6324217457624418\")\\\n.then(func(_initialization_resp):\nprint(\"Oculus Platform initialized\")\nGDOculusPlatform.get_logged_in_user()\\\n    .then(_process_logged_in_user_response)\n)\\\n.error(func(initialization_err):\nprint(\"Oculus Platform initialization error: \", initialization_err)\n)\nfunc _process_logged_in_user_response(resp : Dictionary):\nprint(\"LOGGED IN USER INFO:\")\nprint(\"--------------------\")\nprint(\"ID: \", resp.id)\nprint(\"OCULUS ID: \", resp.oculus_id)\nprint(\"DISPLAY NAME: \", resp.display_name)\nprint(\"IMAGE URL: \", resp.image_url)\nprint(\"SMALL IMAGE URL: \", resp.small_image_url)\n</code></pre></p> <p>You may have noticed that we didn't add an <code>error</code> function call to the <code>get_logged_in_user()</code> function. Both the <code>then</code> and <code>error</code> functions are optional, and you can skip them if you don't care about their result.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>There are several steps to follow before using this asset. We assume you already have an app/game even if you have not published to the AppLab or the Quest Store.</p>"},{"location":"getting-started/#create-a-release-version","title":"Create a release version","text":"<p>You have to create release version of your app (i.e. with Deploy With Debug disabled) to upload it to AppLab of the Quest Store. This app doesn't have to be the final version of your app, but it should be signed with a release keystore.</p> <p>The Exporting for Google Play Store section on the Godot documentation explains this process (it's the same for the Quest Store).</p>"},{"location":"getting-started/#creating-an-app-page","title":"Creating an App Page","text":"<p>First you have to create a page for your app. You can read more about this process in the official Oculus Platform documentation, but essentially you have to:</p> <ul> <li>Log on to the Developer Dashboard.</li> <li>Click Create New App.</li> <li>Enter the name of your app. The name is permanent and cannot be changed.</li> <li>From Platform, select Meta Quest (App Lab).</li> </ul>"},{"location":"getting-started/#upload-your-first-build","title":"Upload your first build","text":"<p>You have to upload a \"first version\" of your app, even if it's not complete or even beginning development. This allows oculus to associate the app's package id (com.example.app for example) to the App Page you created before.</p> <p>We recommend using the Meta Quest Developer Hub (MQDH) to manage your apps, release channels and versions, though there are other ways of uploading a build.</p> <p>Assuming you are using the MQDH, you have to:</p> <ul> <li>Go to \"App Distribution\".</li> <li>Select your app.</li> <li>Click the upload button on the desired release channel. We recommend you upload your first build to the \"ALPHA\" release channel.</li> <li>Select the APK of your app.</li> <li>Finish the upload process.</li> </ul>"},{"location":"getting-started/#request-data-use-checkup-permissions","title":"Request Data Use Checkup permissions","text":"<p>Depending on what functions you use, you have to request different Data Use Checkup permissions. You can read more about this process here.</p> <p>As long as you are in development (haven't published your app yet), you can request all the permissions you need and they will be approved automatically to ease development. Once you want to publish your app, you will have to re-request these permissions.</p>"},{"location":"getting-started/#using-this-asset","title":"Using this asset","text":"<p>First, download this asset and place the addon inside your addons folder and the android plugin inside your android plugins folder. You should be able to just drag and drop the contents of the ZIP file inside your project.</p> <p>You can take a look at the examples to get an idea of how to interact with the Oculus Platform.</p> <p>A concept we use is the use of promises or more specifically <code>GDOculusPlatformPromise</code>s. These promises basically help you perform actions in an asynchronous manner. Take a look at the following example:</p> <p><pre><code>print(\"Godot\")\nGDOP.initialize()\nGDOculusPlatform.initialize_android_async(\"314159265358979\")\\\n.then(func(_initialization_resp):\nprint(\"Oculus\")\n)\nprint(\"Platform\")\n</code></pre> This will print:</p> <pre><code>Godot\nPlatform\nOculus\n</code></pre> <p>Since almost all functions in this platform are asynchronous, they don't block code execution allowing you to do other stuff while you wait for a response from the Oculus Platform.</p>"},{"location":"functions/achievements/","title":"Functions - Achievements","text":"<p>Related Oculus Platform documentation: https://developer.oculus.com/documentation/native/ps-achievements/</p>"},{"location":"functions/achievements/#achievements_add_count","title":"achievements_add_count","text":"<p>achievements_add_count(achievement_name : <code>String</code>, count : <code>int</code>)</p> <p>Adds <code>count</code> to the achievement with the given name. The achievement must be of type COUNT.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will contain <code>Dictionary</code> with information about the achievement's state if fulfilled. The promise will error if the user is not entitled or if the check fails.</p> <p>Example response: <pre><code>{\n\"name\": \"my_count_achievement\",\n\"just_unlocked\": false\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.achievements_add_count(\"my_count_achievement\", 5)\\\n.then(func(add_count_resp : Dictionary):\nif add_count_resp.just_unlocked:\nprint(\"Achievement unlocked!\")\n)\\\n.error(func(add_count_err):\nprint(\"Unable to update achievement: \", add_count_err)\n)\n</code></pre>"},{"location":"functions/achievements/#achievements_add_fields","title":"achievements_add_fields","text":"<p>achievements_add_fields(achievement_name : <code>String</code>, fields : <code>String</code>)</p> <p>Unlocks fields of an achievement of type BITFIELD. The <code>fields</code> argument must be a <code>String</code> containing either \"0\" or \"1\" characters. Every \"1\" will unlock the field in the corresponding position. For example, if the bitfield is <code>10011</code> and you call this function with <code>fields = 00110</code>, the result will be <code>10111</code>.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will contain <code>Dictionary</code> with information about the achievement's state if fulfilled. The promise will error if the user is not entitled or if the check fails.</p> <p>Example response: <pre><code>{\n\"name\": \"my_bitfield_achievement\",\n\"just_unlocked\": true\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.achievements_add_fields(\"my_bitfield_achievement\", \"0011\")\\\n.then(func(add_fields_resp : Dictionary):\nif add_fields_resp.just_unlocked:\nprint(\"Achievement unlocked!\")\n)\\\n.error(func(add_fields_err):\nprint(\"Unable to update achievement: \", add_fields_err)\n)\n</code></pre>"},{"location":"functions/achievements/#achievements_unlock","title":"achievements_unlock","text":"<p>achievements_unlock(achievement_name : <code>String</code>)</p> <p>Unlocks the achievement with the given <code>achievement_name</code>. The achievement can be of any type.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will contain <code>Dictionary</code> with information about the achievement's state if fulfilled. The promise will error if the user is not entitled or if the check fails.</p> <p>Example response: <pre><code>{\n\"name\": \"my_simple_achievement\",\n\"just_unlocked\": true\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.achievements_unlock(\"my_simple_achievement\")\\\n.then(func(unlock_achievement_resp : Dictionary):\nif unlock_achievement_resp.just_unlocked:\nprint(\"Achievement unlocked!\")\n)\\\n.error(func(unlock_achievement_err):\nprint(\"Unable to update achievement: \", unlock_achievement_err)\n)\n</code></pre>"},{"location":"functions/achievements/#achievements_get_all_definitions","title":"achievements_get_all_definitions","text":"<p>achievements_get_all_definitions()</p> <p>Requests all achievement definitions of this app.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will contain  an <code>Array</code> of <code>Dictionaries</code> with information about all the achievements if fulfilled. The promise will error if the user is not entitled or if the check fails.</p> <p>Example response: <pre><code>[\n{\n\"name\": \"my_achievement\",\n\"bitfield_length\": 0,\n\"target\": 0,\n\"type\": \"SIMPLE\"\n},\n{\n\"name\": \"my_count_achievement\",\n\"bitfield_length\": 0,\n\"target\": 64,\n\"type\": \"COUNT\"\n},\n{\n\"name\": \"my_bitfield_achievement\",\n\"bitfield_length\": 8,\n\"target\": 5,\n\"type\": \"BITFIELD\"\n}\n]\n</code></pre></p> Example <pre><code>GDOculusPlatform.achievements_get_all_definitions()\\\n.then(func(achievements : Array):\nfor achievement in achievements:\nprint(\"Achievement: \", achievement.name)\n)\\\n.error(func(achievements_err):\nprint(\"Unable to get achievement definitions: \", achievements_err)\n)\n</code></pre>"},{"location":"functions/achievements/#achievements_get_all_progress","title":"achievements_get_all_progress","text":"<p>achievements_get_all_progress()</p> <p>Requests all the progress of the achievements of this app.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will contain  an <code>Array</code> of <code>Dictionaries</code> with information about progress of all the achievements if fulfilled. The promise will error if the user is not entitled or if the check fails.</p> <p>Example response: <pre><code>[\n{\n\"name\": \"my_achievement\",\n\"current_count\": 0,\n\"current_bitfield\": \"\",\n\"is_unlocked\": true,\n\"unlock_time\": 1683990416\n},\n{\n\"name\": \"my_count_achievement\",\n\"current_count\": 12,\n\"current_bitfield\": \"\",\n\"is_unlocked\": false,\n\"unlock_time\": 0\n},\n{\n\"name\": \"my_bitfield_achievement\",\n\"current_count\": 0,\n\"current_bitfield\": \"10011\",\n\"is_unlocked\": false,\n\"unlock_time\": 0\n}\n]\n</code></pre></p> Example <pre><code>GDOculusPlatform.achievements_get_all_progress()\\\n.then(func(achievements_progress : Array):\nfor achievement_progress in achievements_progress:\nprint(\"Achievement name: \", achievement_progress.name)\nprint(\"Unlocked? \", achievement_progress.is_unlocked)\n)\\\n.error(func(achievements_progress_err):\nprint(\"Unable to get achievements progress: \", achievements_progress_err)\n)\n</code></pre>"},{"location":"functions/achievements/#achievements_get_definitions_by_name","title":"achievements_get_definitions_by_name","text":"<p>achievements_get_definitions_by_name(achievement_names : <code>Array</code>)</p> <p>Requests achievement definitions by name of this app. The <code>achievement_names</code> argument must contain <code>String</code>s only.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will contain  an <code>Array</code> of <code>Dictionaries</code> with information about the requested achievements if fulfilled. The promise will error if the user is not entitled or if the check fails.</p> <p>Example response: <pre><code>[\n{\n\"name\": \"my_achievement\",\n\"bitfield_length\": 0,\n\"target\": 0,\n\"type\": \"SIMPLE\"\n},\n{\n\"name\": \"my_count_achievement\",\n\"bitfield_length\": 0,\n\"target\": 1500,\n\"type\": \"COUNT\"\n},\n{\n\"name\": \"my_bitfield_achievement\",\n\"bitfield_length\": 7,\n\"target\": 3,\n\"type\": \"BITFIELD\"\n}\n]\n</code></pre></p> Example <pre><code>var achievements : Array = [\"my_achievement\", \"my_bitfield_achievement\"]\nGDOculusPlatform.achievements_get_definitions_by_name(achievements)\\\n.then(func(achievement_defs : Array):\nfor achievement_def_ in achievement_defs:\nprint(\"Achievement name: \", achievement_def.name)\n)\\\n.error(func(achievement_defs_err):\nprint(\"Unable to get achievement definitions by name: \", achievement_defs_err)\n)\n</code></pre>"},{"location":"functions/achievements/#achievements_get_progress_by_name","title":"achievements_get_progress_by_name","text":"<p>achievements_get_progress_by_name(achievement_names : <code>Array</code>)</p> <p>Requests progress information of achievements by their name. The <code>achievement_names</code> argument must contain <code>String</code>s only.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will contain  an <code>Array</code> of <code>Dictionaries</code> with information about progress of the requested achievements if fulfilled. The promise will error if the user is not entitled or if the check fails.</p> <p>Example response: <pre><code>[\n{\n\"name\": \"my_achievement\",\n\"current_count\": 0,\n\"current_bitfield\": \"\",\n\"is_unlocked\": false,\n\"unlock_time\": 0\n},\n{\n\"name\": \"my_count_achievement\",\n\"current_count\": 1500,\n\"current_bitfield\": \"\",\n\"is_unlocked\": true,\n\"unlock_time\": 1683990516\n},\n{\n\"name\": \"my_bitfield_achievement\",\n\"current_count\": 0,\n\"current_bitfield\": \"00101\",\n\"is_unlocked\": false,\n\"unlock_time\": 0\n},\n]\n</code></pre></p> Example <pre><code>var achievements : Array = [\"my_count_achievement\"]\nGDOculusPlatform.achievements_get_progress_by_name(achievements)\\\n.then(func(achievements_progress : Array):\nfor achievement_progress in achievements_progress:\nprint(\"Achievement name: \", achievement_progress.name)\nprint(\"Unlock_time: \", achievement_progress.unlock_time)\n)\\\n.error(func(achievements_progress_err):\nprint(\"Unable to get achievements progress: \", achievements_progress_err)\n)\n</code></pre>"},{"location":"functions/initialization/","title":"Functions - Initialization","text":"<p>Important</p> <p>Before initializing the Oculus Platform, you must initialize the plugin like this: <pre><code>GDOP.initialize(false)\n# or\nGDOP.initialize()\n</code></pre> With either <code>false</code> or <code>true</code> (no argument). Passing <code>false</code> will initialize the plugin with <code>quiet_mode=false</code> meaning that it will print unhandled Oculus Platform messages.</p>"},{"location":"functions/initialization/#initialize_android","title":"initialize_android","text":"<p>initialize_android(app_id : <code>String</code>)</p> <p>Requests the Oculus Platform initialization.</p> <p>Returs: A <code>bool</code> that is <code>true</code> if the platform was initialized correctly or <code>false</code> otherwise.</p> Example <pre><code>var platform_initialized : bool = GDOculusPlatform.initialize_android(\"31415926535\");\n</code></pre>"},{"location":"functions/initialization/#initialize_android_async","title":"initialize_android_async","text":"<p>initialize_android_async(app_id : <code>String</code>)</p> <p>Requests the Oculus Platform initialization asynchronously. This is the preferred way of initializing the platform.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will contain a true <code>bool</code> as a response if fulfilled. An error message will be available if rejected/couldn't initialize.</p> Example <pre><code>GDOculusPlatform.initialize_android_async(\"31415926535\")\\\n.then(func(platform_initialized : bool):\nprint(\"Platform initialized!\")\n)\\\n.error(func(platform_initialized_err):\nprint(\"Platform NOT initialized. Error message: \", platform_initialized_err)\n)\n</code></pre>"},{"location":"functions/user/","title":"Functions - User","text":"<p>Related Oculus Platform documentation:</p> <ul> <li>https://developer.oculus.com/documentation/native/ps-presence/</li> <li>https://developer.oculus.com/documentation/native/ps-entitlement-check/</li> <li>https://developer.oculus.com/documentation/native/ps-blockingsdk/</li> </ul>"},{"location":"functions/user/#user_get_logged_in_user_id","title":"user_get_logged_in_user_id","text":"<p>user_get_logged_in_user_id()</p> <p>Requests the logged-in user ID.</p> <p>Returs: A <code>String</code> with the user ID. The <code>String</code> will be \"0\" if there's no ID.</p> Example <pre><code>var user_id : String = user_get_logged_in_user_id()\n# user_id = \"314159265358979\" for example\n</code></pre>"},{"location":"functions/user/#user_get_logged_in_user_locale","title":"user_get_logged_in_user_locale","text":"<p>user_get_logged_in_user_locale()</p> <p>Requests the logged-in user's locale'.</p> <p>Returs: A <code>String</code> with the user's locale that conforms to BCP47: https://tools.ietf.org/html/bcp47</p> Example <pre><code>var user_locale : String = user_get_logged_in_user_locale()\n# user_locale = \"en-US\" for example\n</code></pre>"},{"location":"functions/user/#user_get_is_viewer_entitled","title":"user_get_is_viewer_entitled","text":"<p>user_get_is_viewer_entitled()</p> <p>Checks if the user that launched the app is entitled to the application/game.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will be fulfilled if the user is entitled. The promise will error if the user is not entitled or if the check fails.</p> Example <pre><code>GDOculusPlatform.user_get_is_viewer_entitled()\\\n.then(func(_viewer_entitled_resp):\nprint(\"User is entitled!\")\n)\\\n.error(func(_viewer_entitled_err):\nprint(\"User is not entitled/error.\")\n)\n</code></pre>"},{"location":"functions/user/#user_get_user","title":"user_get_user","text":"<p>user_get_user(user_id : <code>String</code>)</p> <p>Requests information about a single user by ID.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> as a response if fulfilled. An error message will be available if rejected.</p> <p>Example response: <pre><code>{\n\"id\": \"31415926535\",\n\"oculus_id\": \"some_id\",\n\"display_name\": \"steve\",\n\"image_url\": \"https://example.org/some-image.png\",\n\"small_image_url\": \"https://example.org/some-smaller-image.png\",\n\"presence\": {\n\"presence_status\": \"ONLINE\",\n\"presence_deeplink_message\": \"\",\n\"presence_destination_api_name\": \"\",\n\"presence_lobby_session_id\": \"\",\n\"presence_match_session_id\": \"\",\n}\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.user_get_user(\"31415926535\")\\\n.then(func(get_user_resp : Dictionary):\nprint(\"User info: \", get_user_resp)\n)\\\n.error(func(get_user_err):\nprint(\"Unable to get user info: \", get_user_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_logged_in_user","title":"user_get_logged_in_user","text":"<p>user_get_logged_in_user()</p> <p>Requests information about the user that launched the app.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will contain a <code>Dictionary</code> as a response if fulfilled. An error message will be available if rejected.</p> <p>Example response: <pre><code>{\n\"id\": \"89793238462\",\n\"oculus_id\": \"some_other_id\",\n\"display_name\": \"steven\",\n\"image_url\": \"https://example.org/some-image.png\",\n\"small_image_url\": \"\",\n\"presence\": {\n\"presence_status\": \"UNKNOWN\",\n\"presence_deeplink_message\": \"\",\n\"presence_destination_api_name\": \"\",\n\"presence_lobby_session_id\": \"\",\n\"presence_match_session_id\": \"\",\n}\n}\n</code></pre></p> <p>Note</p> <p>Even though the <code>Dictionary</code> includes a <code>presence</code> key, it will not contain information other than \"UNKNOWN\" for the status. The current user should be 'online' for your application.</p> Example <pre><code>GDOculusPlatform.user_get_logged_in_user()\\\n.then(func(get_user_resp : Dictionary):\nprint(\"User info: \", get_user_resp)\n)\\\n.error(func(get_user_err):\nprint(\"Unable to get user info: \", get_user_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_user_proof","title":"user_get_user_proof","text":"<p>user_get_user_proof()</p> <p>Requests a nonce used to verify the current user. Check the official Oculus Platform documentation for more details.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will be fulfilled with the nonce as a <code>String</code> parameter. The function will error with a message if an error occured.</p> <p>Note</p> <p>A nonce is only valid once. After you use it to verify the user it becomes invalid.</p> Example <pre><code>GDOculusPlatform.user_get_user_proof()\\\n.then(func(user_proof_resp : String):\nprint(\"Nonce: \", user_proof_resp)\n)\\\n.error(func(user_proof_err):\nprint(\"Error getting user proof: \", user_proof_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_user_access_token","title":"user_get_user_access_token","text":"<p>user_get_user_access_token()</p> <p>Requests a token of the current user suitable to make REST calls against graph.oculus.com</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will be fulfilled with the access token as a <code>String</code> parameter. The function will error with a message if an error occured.</p> Example <pre><code>GDOculusPlatform.user_get_user_access_token()\\\n.then(func(user_access_token : String):\nprint(\"Access token: \", user_access_token)\n)\\\n.error(func(user_access_token_err):\nprint(\"Error getting user proof: \", user_access_token_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_blocked_users","title":"user_get_blocked_users","text":"<p>user_get_blocked_users()</p> <p>Requests the user IDs of users blocked by the current user.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> that will contain an <code>Array</code> of user IDs as <code>String</code>s. The function will error with a message if an error occured.</p> Example <pre><code>GDOculusPlatform.user_get_blocked_users()\\\n.then(func(blocked_users : Array):\nfor user_id in blocked_users:\nprint(\"Blocked user ID: \", user_id)\n)\\\n.error(func(blocked_users_err):\nprint(\"Error getting blocked users: \", blocked_users_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_logged_in_user_friends","title":"user_get_logged_in_user_friends","text":"<p>user_get_logged_in_user_friends()</p> <p>Requests the user IDs of the current user's friends.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> will contain an <code>Array</code> of <code>Dictionaries</code> with information about each friend. Same format as the <code>Dictionary</code> returned by user_get_user(). The function will error with a message if an error occured.</p> Example <pre><code>GDOculusPlatform.user_get_logged_in_user_friends()\\\n.then(func(friends : Array):\nfor friend_info in friends:\nprint(\"Friend ID: \", friend_info.id)\nprint(\"Friend image: \", friend_info.image_url)\n)\\\n.error(func(friends_err):\nprint(\"Error getting friends: \", friends_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_org_scoped_id","title":"user_get_org_scoped_id","text":"<p>user_get_org_scoped_id(user_id : <code>String</code>)</p> <p>Requests an ID which is unique per org. Allows different apps within the same org to identify the user.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> will contain the given user's scoped org ID as a <code>String</code>. The function will error with a message if an error occured.</p> Example <pre><code>GDOculusPlatform.user_get_org_scoped_id(\"31415926535\")\\\n.then(func(org_scoped_id : String):\nprint(\"Org scoped ID: \", org_scoped_id)\n)\\\n.error(func(org_scoped_id_err):\nprint(\"Error getting org scoped ID: \", org_scoped_id_err)\n)\n</code></pre>"},{"location":"functions/user/#user_get_sdk_accounts","title":"user_get_sdk_accounts","text":"<p>user_get_sdk_accounts()</p> <p>Requests all the accounts belonging to the current user.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> will contain an <code>Array</code> of <code>Dictionaries</code> with the type of account and its ID, if fulfilled. The function will error with a message if an error occured.</p> <p>Example response: <pre><code>[\n{\n\"account_type\": \"OCULUS\",\n\"account_id\": \"31415926535\",\n}\n]\n</code></pre></p> Example <pre><code>GDOculusPlatform.user_get_sdk_accounts()\\\n.then(func(sdk_accounts : Array):\nfor sdk_account in sdk_accounts:\nprint(\"Account type: \", sdk_account.account_type)\nprint(\"Account ID: \", sdk_account.account_id)\n)\\\n.error(func(sdk_accounts_err):\nprint(\"Error getting SDK accounts: \", sdk_accounts_err)\n)\n</code></pre>"},{"location":"functions/user/#user_launch_block_flow","title":"user_launch_block_flow","text":"<p>user_launch_block_flow(user_id : <code>String</code>)</p> <p>Launches a block flow to block the user associated with the given <code>user_id</code>. The user/player can then decide to block or cancel the request.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> will contain an <code>Dictionary</code> reflecting the choices of the user/player. The function will error with a message if an error occured.</p> <p>Example response: <pre><code>{\n\"did_block\": true,\n\"did_cancel\": false,\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.user_launch_block_flow(\"89793238462\")\\\n.then(func(block_flow_resp : Dictionary):\nif block_flow_resp.did_block:\nprint(\"User blocked!\")\nelse:\nprint(\"Changed your mind?\")\n)\\\n.error(func(block_flow_err):\nprint(\"Error launching block flow: \", block_flow_err)\n)\n</code></pre>"},{"location":"functions/user/#user_launch_unblock_flow","title":"user_launch_unblock_flow","text":"<p>user_launch_unblock_flow(user_id : <code>String</code>)</p> <p>Launches an unblock flow to unblock the user associated with the given <code>user_id</code>. The user/player can then decide to unblock or cancel the request.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> will contain an <code>Dictionary</code> reflecting the choices of the user/player. The function will error with a message if an error occured.</p> <p>Example response: <pre><code>{\n\"did_unblock\": true,\n\"did_cancel\": false,\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.user_launch_unblock_flow(\"89793238462\")\\\n.then(func(unblock_flow_resp : Dictionary):\nif unblock_flow_resp.did_unblock:\nprint(\"User unblocked!\")\nelse:\nprint(\"Better keep them blocked!\")\n)\\\n.error(func(unblock_flow_err):\nprint(\"Error launching unblock flow: \", unblock_flow_err)\n)\n</code></pre>"},{"location":"functions/user/#user_launch_friend_request_flow","title":"user_launch_friend_request_flow","text":"<p>user_launch_friend_request_flow(user_id : <code>String</code>)</p> <p>Launches a friend request flow to add the user associated with the given <code>user_id</code> as a friend. The user/player can then decide to send the request or cancel it.</p> <p>Returs: A <code>GDOculusPlatformPromise</code> will contain an <code>Dictionary</code> reflecting the choices of the user/player. The function will error with a message if an error occured.</p> <p>Example response: <pre><code>{\n\"did_send_request\": true,\n\"did_cancel\": false,\n}\n</code></pre></p> Example <pre><code>GDOculusPlatform.user_launch_friend_request_flow(\"89793238462\")\\\n.then(func(friend_req_flow_resp : Dictionary):\nif friend_req_flow_resp.did_send_request:\nprint(\"Friend request sent!\")\nelse:\nprint(\"Actually now that I think about it...\")\n)\\\n.error(func(friend_req_flow_err):\nprint(\"Error launching friend request flow: \", friend_req_flow_err)\n)\n</code></pre>"}]}